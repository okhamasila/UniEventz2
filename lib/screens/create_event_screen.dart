import 'package:flutter/material.dart';
import 'dart:io';

void main() {
  runApp(const CreateEventScreen());
}

// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class CreateEventScreen extends StatefulWidget {
  const CreateEventScreen({super.key});

  @override
  State<CreateEventScreen> createState() => _CreateEventScreenState();
}

class _CreateEventScreenState extends State<CreateEventScreen> {
  final _formKey = GlobalKey<FormState>();
  final _eventNameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _venueController = TextEditingController();
  final _priceController = TextEditingController();
  final _maxParticipantsController = TextEditingController();
  final _registrationDeadlineController = TextEditingController();

  String? _selectedCategory;
  String? _selectedFormat;
  String? _selectedTicketType;
  bool _enableNotifications = false;
  DateTime? _startDateTime;
  DateTime? _endDateTime;
  String? _bannerImagePath;

  @override
  void dispose() {
    _eventNameController.dispose();
    _descriptionController.dispose();
    _venueController.dispose();
    _priceController.dispose();
    _maxParticipantsController.dispose();
    _registrationDeadlineController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
      home: Scaffold(
        body: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildEventNameSection(),
                  const SizedBox(height: 24),
                  _buildDescriptionSection(),
                  const SizedBox(height: 24),
                  _buildCategorySection(),
                  const SizedBox(height: 24),
                  _buildEventBannerSection(),
                  const SizedBox(height: 24),
                  _buildDateTimeSection(),
                  const SizedBox(height: 24),
                  _buildLocationSection(),
                  const SizedBox(height: 24),
                  _buildTicketingSection(),
                  const SizedBox(height: 24),
                  _buildAdditionalFeaturesSection(),
                  const SizedBox(height: 24),
                  _buildActionButtons(),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildEventNameSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Event Name',
          style: TextStyle(
            color: Color(0xFF404040),
            fontSize: 14,
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: _eventNameController,
          decoration: InputDecoration(
            hintText: 'Enter event name',
            hintStyle: const TextStyle(color: Color(0xFFADAEBC)),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
            ),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter an event name';
            }
            return null;
          },
        ),
      ],
    );
  }

  Widget _buildDescriptionSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Description',
          style: TextStyle(
            color: Color(0xFF404040),
            fontSize: 14,
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: _descriptionController,
          maxLines: 4,
          decoration: InputDecoration(
            hintText: 'Describe your event',
            hintStyle: const TextStyle(color: Color(0xFFADAEBC)),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
            ),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter an event description';
            }
            return null;
          },
        ),
      ],
    );
  }

  Widget _buildCategorySection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Category',
          style: TextStyle(
            color: Color(0xFF404040),
            fontSize: 14,
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          children: [
            _CategoryChip(
              label: 'Sports',
              isSelected: _selectedCategory == 'Sports',
              onSelected: (selected) {
                setState(() {
                  _selectedCategory = selected ? 'Sports' : null;
                });
              },
            ),
            _CategoryChip(
              label: 'AI',
              isSelected: _selectedCategory == 'AI',
              onSelected: (selected) {
                setState(() {
                  _selectedCategory = selected ? 'AI' : null;
                });
              },
            ),
            _CategoryChip(
              label: 'Business',
              isSelected: _selectedCategory == 'Business',
              onSelected: (selected) {
                setState(() {
                  _selectedCategory = selected ? 'Business' : null;
                });
              },
            ),
            _CategoryChip(
              label: 'Music',
              isSelected: _selectedCategory == 'Music',
              onSelected: (selected) {
                setState(() {
                  _selectedCategory = selected ? 'Music' : null;
                });
              },
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildEventBannerSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Event Banner',
          style: TextStyle(
            color: Color(0xFF404040),
            fontSize: 14,
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 8),
        GestureDetector(
          onTap: _pickBannerImage,
          child: Container(
            height: 200,
            decoration: BoxDecoration(
              border: Border.all(color: const Color(0xFFD4D4D4), width: 2),
              borderRadius: BorderRadius.circular(8),
              image: _bannerImagePath != null
                  ? DecorationImage(
                      image: FileImage(File(_bannerImagePath!)),
                      fit: BoxFit.cover,
                    )
                  : null,
            ),
            child: _bannerImagePath == null
                ? Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Icon(Icons.add_photo_alternate, size: 30),
                      const SizedBox(height: 8),
                      const Text(
                        'Upload event cover image',
                        style: TextStyle(
                          color: Color(0xFF737373),
                          fontSize: 14,
                        ),
                      ),
                    ],
                  )
                : null,
          ),
        ),
      ],
    );
  }

  Widget _buildDateTimeSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Date & Time',
          style: TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 16),
        _buildDateTimeField('Start Date & Time', _startDateTime, (date) {
          setState(() {
            _startDateTime = date;
          });
        }),
        const SizedBox(height: 16),
        _buildDateTimeField('End Date & Time', _endDateTime, (date) {
          setState(() {
            _endDateTime = date;
          });
        }),
      ],
    );
  }

  Widget _buildDateTimeField(String label, DateTime? date, Function(DateTime) onDateSelected) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            color: Color(0xFF404040),
            fontSize: 14,
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 8),
        InkWell(
          onTap: () async {
            final selectedDate = await showDatePicker(
              context: context,
              initialDate: date ?? DateTime.now(),
              firstDate: DateTime.now(),
              lastDate: DateTime.now().add(const Duration(days: 365)),
            );
            if (selectedDate != null) {
              final selectedTime = await showTimePicker(
                context: context,
                initialTime: TimeOfDay.now(),
              );
              if (selectedTime != null) {
                onDateSelected(DateTime(
                  selectedDate.year,
                  selectedDate.month,
                  selectedDate.day,
                  selectedTime.hour,
                  selectedTime.minute,
                ));
              }
            }
          },
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),
            decoration: BoxDecoration(
              border: Border.all(color: const Color(0xFFD4D4D4)),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  date != null
                      ? '${date.day}/${date.month}/${date.year} ${date.hour}:${date.minute}'
                      : 'mm/dd/yyyy --:-- --',
                  style: const TextStyle(color: Color(0xFFADAEBC)),
                ),
                const Icon(Icons.calendar_today),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildLocationSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Location & Format',
          style: TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            _FormatRadioButton(
              label: 'Online',
              value: 'Online',
              groupValue: _selectedFormat,
              onChanged: (value) {
                setState(() {
                  _selectedFormat = value;
                });
              },
            ),
            _FormatRadioButton(
              label: 'Offline',
              value: 'Offline',
              groupValue: _selectedFormat,
              onChanged: (value) {
                setState(() {
                  _selectedFormat = value;
                });
              },
            ),
            _FormatRadioButton(
              label: 'Hybrid',
              value: 'Hybrid',
              groupValue: _selectedFormat,
              onChanged: (value) {
                setState(() {
                  _selectedFormat = value;
                });
              },
            ),
          ],
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _venueController,
          decoration: InputDecoration(
            hintText: 'Enter venue or meeting link',
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
            ),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a venue or meeting link';
            }
            return null;
          },
        ),
      ],
    );
  }

  Widget _buildTicketingSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Ticketing & Registration',
          style: TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            _TicketTypeRadioButton(
              label: 'Free',
              value: 'Free',
              groupValue: _selectedTicketType,
              onChanged: (value) {
                setState(() {
                  _selectedTicketType = value;
                });
              },
            ),
            _TicketTypeRadioButton(
              label: 'Paid',
              value: 'Paid',
              groupValue: _selectedTicketType,
              onChanged: (value) {
                setState(() {
                  _selectedTicketType = value;
                });
              },
            ),
          ],
        ),
        const SizedBox(height: 16),
        if (_selectedTicketType == 'Paid')
          TextFormField(
            controller: _priceController,
            keyboardType: TextInputType.number,
            decoration: InputDecoration(
              hintText: 'Ticket price',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
                borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
              ),
            ),
            validator: (value) {
              if (_selectedTicketType == 'Paid' && (value == null || value.isEmpty)) {
                return 'Please enter a ticket price';
              }
              return null;
            },
          ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _maxParticipantsController,
          keyboardType: TextInputType.number,
          decoration: InputDecoration(
            hintText: 'Maximum participants',
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
            ),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter maximum participants';
            }
            return null;
          },
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _registrationDeadlineController,
          decoration: InputDecoration(
            hintText: 'Registration deadline',
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
            ),
            suffixIcon: const Icon(Icons.calendar_today),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter registration deadline';
            }
            return null;
          },
        ),
      ],
    );
  }

  Widget _buildAdditionalFeaturesSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Additional Features',
          style: TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 16),
        SwitchListTile(
          title: const Text('Enable Notifications'),
          value: _enableNotifications,
          onChanged: (value) {
            setState(() {
              _enableNotifications = value;
            });
          },
        ),
      ],
    );
  }

  Widget _buildActionButtons() {
    return Column(
      children: [
        ElevatedButton(
          onPressed: _previewEvent,
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFFF5F5F5),
            foregroundColor: const Color(0xFF404040),
            minimumSize: const Size(double.infinity, 48),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          child: const Text('Preview Event'),
        ),
        const SizedBox(height: 16),
        ElevatedButton(
          onPressed: _createEvent,
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF171717),
            foregroundColor: Colors.white,
            minimumSize: const Size(double.infinity, 48),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
          child: const Text('Create Event'),
        ),
      ],
    );
  }

  Future<void> _pickBannerImage() async {
    // TODO: Implement image picking
  }

  void _saveDraft() {
    // TODO: Implement draft saving
  }

  void _previewEvent() {
    // TODO: Implement event preview
  }

  void _createEvent() {
    if (_formKey.currentState!.validate()) {
      // TODO: Implement event creation
    }
  }
}

class _CategoryChip extends StatelessWidget {
  final String label;
  final bool isSelected;
  final Function(bool) onSelected;

  const _CategoryChip({
    required this.label,
    required this.isSelected,
    required this.onSelected,
  });

  @override
  Widget build(BuildContext context) {
    return FilterChip(
      label: Text(label),
      selected: isSelected,
      onSelected: onSelected,
      backgroundColor: Colors.white,
      selectedColor: Colors.grey[200],
      side: const BorderSide(color: Color(0xFFD4D4D4)),
    );
  }
}

class _FormatRadioButton extends StatelessWidget {
  final String label;
  final String value;
  final String? groupValue;
  final Function(String?) onChanged;

  const _FormatRadioButton({
    required this.label,
    required this.value,
    required this.groupValue,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Radio<String>(
          value: value,
          groupValue: groupValue,
          onChanged: onChanged,
        ),
        Text(label),
      ],
    );
  }
}

class _TicketTypeRadioButton extends StatelessWidget {
  final String label;
  final String value;
  final String? groupValue;
  final Function(String?) onChanged;

  const _TicketTypeRadioButton({
    required this.label,
    required this.value,
    required this.groupValue,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Radio<String>(
          value: value,
          groupValue: groupValue,
          onChanged: onChanged,
        ),
        Text(label),
      ],
    );
  }
}