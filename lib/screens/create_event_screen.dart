import 'package:flutter/material.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'event_verification_screen.dart';
import '../utils/app_colors.dart';

void main() {
  runApp(const CreateEventScreen());
}

// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class CreateEventScreen extends StatefulWidget {
  const CreateEventScreen({super.key});

  @override
  State<CreateEventScreen> createState() => _CreateEventScreenState();
}

class _CreateEventScreenState extends State<CreateEventScreen> with SingleTickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  final _eventNameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _venueController = TextEditingController();
  final _priceController = TextEditingController();
  final _maxParticipantsController = TextEditingController();
  final _registrationDeadlineController = TextEditingController();

  String? _selectedCategory;
  String? _selectedFormat;
  String? _selectedTicketType;
  bool _enableNotifications = false;
  DateTime? _startDateTime;
  DateTime? _endDateTime;
  String? _bannerImagePath;
  bool _isLoading = false;
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(_animationController);
    _loadDraft();
    _animationController.forward();
  }

  @override
  void dispose() {
    _eventNameController.dispose();
    _descriptionController.dispose();
    _venueController.dispose();
    _priceController.dispose();
    _maxParticipantsController.dispose();
    _registrationDeadlineController.dispose();
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _loadDraft() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _eventNameController.text = prefs.getString('eventName') ?? '';
      _descriptionController.text = prefs.getString('description') ?? '';
      _venueController.text = prefs.getString('venue') ?? '';
      _priceController.text = prefs.getString('price') ?? '';
      _maxParticipantsController.text = prefs.getString('maxParticipants') ?? '';
      _registrationDeadlineController.text = prefs.getString('registrationDeadline') ?? '';
      _selectedCategory = prefs.getString('category');
      _selectedFormat = prefs.getString('format');
      _selectedTicketType = prefs.getString('ticketType');
      _enableNotifications = prefs.getBool('notifications') ?? false;
      _bannerImagePath = prefs.getString('bannerImage');
      final startDate = prefs.getString('startDateTime');
      final endDate = prefs.getString('endDateTime');
      if (startDate != null) _startDateTime = DateTime.parse(startDate);
      if (endDate != null) _endDateTime = DateTime.parse(endDate);
    });
  }

  Future<void> _saveDraft() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('eventName', _eventNameController.text);
    await prefs.setString('description', _descriptionController.text);
    await prefs.setString('venue', _venueController.text);
    await prefs.setString('price', _priceController.text);
    await prefs.setString('maxParticipants', _maxParticipantsController.text);
    await prefs.setString('registrationDeadline', _registrationDeadlineController.text);
    if (_selectedCategory != null) await prefs.setString('category', _selectedCategory!);
    if (_selectedFormat != null) await prefs.setString('format', _selectedFormat!);
    if (_selectedTicketType != null) await prefs.setString('ticketType', _selectedTicketType!);
    await prefs.setBool('notifications', _enableNotifications);
    if (_bannerImagePath != null) await prefs.setString('bannerImage', _bannerImagePath!);
    if (_startDateTime != null) await prefs.setString('startDateTime', _startDateTime!.toIso8601String());
    if (_endDateTime != null) await prefs.setString('endDateTime', _endDateTime!.toIso8601String());

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Draft saved successfully'),
        backgroundColor: Colors.green,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.background,
      appBar: AppBar(
        backgroundColor: AppColors.surface,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: AppColors.textPrimary),
          onPressed: () => Navigator.pop(context),
        ),
        title: const Text(
          'Create New Event',
          style: TextStyle(
            color: AppColors.textPrimary,
            fontSize: 18,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
        actions: [
          TextButton.icon(
            onPressed: _saveDraft,
            icon: const Icon(Icons.save, color: AppColors.textSecondary),
            label: const Text(
              'Save Draft',
              style: TextStyle(
                color: AppColors.textSecondary,
                fontSize: 14,
                fontFamily: 'Inter',
                fontWeight: FontWeight.w400,
              ),
            ),
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: Stack(
          children: [
            SingleChildScrollView(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildEventNameSection(),
                    const SizedBox(height: 24),
                    _buildDescriptionSection(),
                    const SizedBox(height: 24),
                    _buildCategorySection(),
                    const SizedBox(height: 24),
                    _buildEventBannerSection(),
                    const SizedBox(height: 24),
                    _buildDateTimeSection(),
                    const SizedBox(height: 24),
                    _buildLocationSection(),
                    const SizedBox(height: 24),
                    _buildTicketingSection(),
                    const SizedBox(height: 24),
                    _buildAdditionalFeaturesSection(),
                    const SizedBox(height: 24),
                    _buildActionButtons(),
                    const SizedBox(height: 80), // Space for bottom navigation
                  ],
                ),
              ),
            ),
            if (_isLoading)
              Container(
                color: AppColors.black.withOpacity(0.5),
                child: const Center(
                  child: CircularProgressIndicator(
                    valueColor: AlwaysStoppedAnimation<Color>(AppColors.primary),
                  ),
                ),
              ),
          ],
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: 1,
        onTap: (index) {
          switch (index) {
            case 0:
              Navigator.pushNamedAndRemoveUntil(
                context,
                '/home',
                (route) => false,
              );
              break;
            case 2:
              Navigator.pushNamedAndRemoveUntil(
                context,
                '/profile',
                (route) => false,
              );
              break;
          }
        },
        selectedItemColor: AppColors.primary,
        unselectedItemColor: const Color(0xFFADAEBC),
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.home_outlined),
            activeIcon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.add_circle_outline),
            activeIcon: Icon(Icons.add_circle),
            label: 'Create',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline),
            activeIcon: Icon(Icons.person),
            label: 'Profile',
          ),
        ],
      ),
    );
  }

  Widget _buildEventNameSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Event Name',
          style: TextStyle(
            color: Color(0xFF404040),
            fontSize: 14,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: _eventNameController,
          decoration: InputDecoration(
            hintText: 'Enter event name',
            hintStyle: const TextStyle(
              color: Color(0xFFADAEBC),
              fontSize: 16,
              fontFamily: 'Inter',
              fontWeight: FontWeight.w400,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
            ),
            contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter an event name';
            }
            return null;
          },
        ),
      ],
    );
  }

  Widget _buildDescriptionSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Description',
          style: TextStyle(
            color: Color(0xFF404040),
            fontSize: 14,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: _descriptionController,
          maxLines: 4,
          decoration: InputDecoration(
            hintText: 'Describe your event',
            hintStyle: const TextStyle(
              color: Color(0xFFADAEBC),
              fontSize: 16,
              fontFamily: 'Inter',
              fontWeight: FontWeight.w400,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
            ),
            contentPadding: const EdgeInsets.all(12),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter an event description';
            }
            return null;
          },
        ),
      ],
    );
  }

  Widget _buildCategorySection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Category',
          style: TextStyle(
            color: Color(0xFF404040),
            fontSize: 14,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          children: [
            _CategoryChip(
              label: 'Sports',
              isSelected: _selectedCategory == 'Sports',
              onSelected: (selected) {
                setState(() {
                  _selectedCategory = selected ? 'Sports' : null;
                });
              },
            ),
            _CategoryChip(
              label: 'AI',
              isSelected: _selectedCategory == 'AI',
              onSelected: (selected) {
                setState(() {
                  _selectedCategory = selected ? 'AI' : null;
                });
              },
            ),
            _CategoryChip(
              label: 'Business',
              isSelected: _selectedCategory == 'Business',
              onSelected: (selected) {
                setState(() {
                  _selectedCategory = selected ? 'Business' : null;
                });
              },
            ),
            _CategoryChip(
              label: 'Music',
              isSelected: _selectedCategory == 'Music',
              onSelected: (selected) {
                setState(() {
                  _selectedCategory = selected ? 'Music' : null;
                });
              },
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildEventBannerSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Event Banner',
          style: TextStyle(
            color: Color(0xFF404040),
            fontSize: 14,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 8),
        Container(
          width: double.infinity,
          decoration: BoxDecoration(
            border: Border.all(color: const Color(0xFFD4D4D4)),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Column(
            children: [
              GestureDetector(
                onTap: _pickBannerImage,
                child: Container(
                  width: double.infinity,
                  height: 200,
                  decoration: BoxDecoration(
                    color: const Color(0xFFF5F5F5),
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(7),
                      topRight: Radius.circular(7),
                    ),
                    image: _bannerImagePath != null
                        ? DecorationImage(
                            image: FileImage(File(_bannerImagePath!)),
                            fit: BoxFit.cover,
                          )
                        : null,
                  ),
                  child: _bannerImagePath == null
                      ? Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Container(
                              padding: const EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(50),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.1),
                                    blurRadius: 4,
                                    offset: const Offset(0, 2),
                                  ),
                                ],
                              ),
                              child: const Icon(
                                Icons.add_photo_alternate,
                                size: 30,
                                color: Color(0xFF404040),
                              ),
                            ),
                            const SizedBox(height: 12),
                            const Text(
                              'Upload event cover image',
                              style: TextStyle(
                                color: Color(0xFF404040),
                                fontSize: 14,
                                fontFamily: 'Inter',
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                            const SizedBox(height: 4),
                            const Text(
                              'Recommended size: 1200 x 400 pixels',
                              style: TextStyle(
                                color: Color(0xFFADAEBC),
                                fontSize: 12,
                                fontFamily: 'Inter',
                                fontWeight: FontWeight.w400,
                              ),
                            ),
                          ],
                        )
                      : null,
                ),
              ),
              if (_bannerImagePath != null)
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                  decoration: const BoxDecoration(
                    color: Color(0xFFF5F5F5),
                    borderRadius: BorderRadius.only(
                      bottomLeft: Radius.circular(7),
                      bottomRight: Radius.circular(7),
                    ),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Row(
                        children: [
                          const Icon(
                            Icons.check_circle,
                            size: 16,
                            color: Color(0xFF4CAF50),
                          ),
                          const SizedBox(width: 8),
                          const Text(
                            'Image uploaded',
                            style: TextStyle(
                              color: Color(0xFF404040),
                              fontSize: 12,
                              fontFamily: 'Inter',
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                      TextButton.icon(
                        onPressed: _pickBannerImage,
                        icon: const Icon(
                          Icons.edit,
                          size: 16,
                          color: Color(0xFF404040),
                        ),
                        label: const Text(
                          'Change',
                          style: TextStyle(
                            color: Color(0xFF404040),
                            fontSize: 12,
                            fontFamily: 'Inter',
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildDateTimeSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Date & Time',
          style: TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 16),
        _buildDateTimeField('Start Date & Time', _startDateTime, (date) {
          setState(() {
            _startDateTime = date;
          });
        }),
        const SizedBox(height: 16),
        _buildDateTimeField('End Date & Time', _endDateTime, (date) {
          setState(() {
            _endDateTime = date;
          });
        }),
      ],
    );
  }

  Widget _buildDateTimeField(String label, DateTime? date, Function(DateTime) onDateSelected) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            color: Color(0xFF404040),
            fontSize: 14,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 8),
        InkWell(
          onTap: () async {
            final selectedDate = await showDatePicker(
              context: context,
              initialDate: date ?? DateTime.now(),
              firstDate: DateTime.now(),
              lastDate: DateTime.now().add(const Duration(days: 365)),
            );
            if (selectedDate != null) {
              final selectedTime = await showTimePicker(
                context: context,
                initialTime: TimeOfDay.now(),
              );
              if (selectedTime != null) {
                onDateSelected(DateTime(
                  selectedDate.year,
                  selectedDate.month,
                  selectedDate.day,
                  selectedTime.hour,
                  selectedTime.minute,
                ));
              }
            }
          },
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
            decoration: BoxDecoration(
              color: Colors.white,
              border: Border.all(color: const Color(0xFFD4D4D4)),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  date != null
                      ? '${date.day}/${date.month}/${date.year} ${date.hour}:${date.minute}'
                      : 'mm/dd/yyyy --:-- --',
                  style: const TextStyle(
                    color: Color(0xFFADAEBC),
                    fontSize: 16,
                    fontFamily: 'Inter',
                    fontWeight: FontWeight.w400,
                  ),
                ),
                const Icon(Icons.calendar_today, size: 24),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildLocationSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Location & Format',
          style: TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            _FormatRadioButton(
              label: 'Online',
              value: 'Online',
              groupValue: _selectedFormat,
              onChanged: (value) {
                setState(() {
                  _selectedFormat = value;
                });
              },
            ),
            _FormatRadioButton(
              label: 'Offline',
              value: 'Offline',
              groupValue: _selectedFormat,
              onChanged: (value) {
                setState(() {
                  _selectedFormat = value;
                });
              },
            ),
            _FormatRadioButton(
              label: 'Hybrid',
              value: 'Hybrid',
              groupValue: _selectedFormat,
              onChanged: (value) {
                setState(() {
                  _selectedFormat = value;
                });
              },
            ),
          ],
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _venueController,
          decoration: InputDecoration(
            hintText: 'Enter venue or meeting link',
            hintStyle: const TextStyle(
              color: Color(0xFFADAEBC),
              fontSize: 16,
              fontFamily: 'Inter',
              fontWeight: FontWeight.w400,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
            ),
            contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter a venue or meeting link';
            }
            return null;
          },
        ),
      ],
    );
  }

  Widget _buildTicketingSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Ticketing & Registration',
          style: TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            _TicketTypeRadioButton(
              label: 'Free',
              value: 'Free',
              groupValue: _selectedTicketType,
              onChanged: (value) {
                setState(() {
                  _selectedTicketType = value;
                });
              },
            ),
            _TicketTypeRadioButton(
              label: 'Paid',
              value: 'Paid',
              groupValue: _selectedTicketType,
              onChanged: (value) {
                setState(() {
                  _selectedTicketType = value;
                });
              },
            ),
          ],
        ),
        const SizedBox(height: 16),
        if (_selectedTicketType == 'Paid')
          TextFormField(
            controller: _priceController,
            keyboardType: TextInputType.number,
            decoration: InputDecoration(
              hintText: 'Ticket price',
              hintStyle: const TextStyle(
                color: Color(0xFFADAEBC),
                fontSize: 16,
                fontFamily: 'Inter',
                fontWeight: FontWeight.w400,
              ),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
                borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
              ),
              contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
            ),
            validator: (value) {
              if (_selectedTicketType == 'Paid' && (value == null || value.isEmpty)) {
                return 'Please enter a ticket price';
              }
              return null;
            },
          ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _maxParticipantsController,
          keyboardType: TextInputType.number,
          decoration: InputDecoration(
            hintText: 'Maximum participants',
            hintStyle: const TextStyle(
              color: Color(0xFFADAEBC),
              fontSize: 16,
              fontFamily: 'Inter',
              fontWeight: FontWeight.w400,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
            ),
            contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter maximum participants';
            }
            return null;
          },
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _registrationDeadlineController,
          decoration: InputDecoration(
            hintText: 'Registration deadline',
            hintStyle: const TextStyle(
              color: Color(0xFFADAEBC),
              fontSize: 16,
              fontFamily: 'Inter',
              fontWeight: FontWeight.w400,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFFD4D4D4)),
            ),
            contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
            suffixIcon: const Icon(Icons.calendar_today),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter registration deadline';
            }
            return null;
          },
        ),
      ],
    );
  }

  Widget _buildAdditionalFeaturesSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Additional Features',
          style: TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
        const SizedBox(height: 16),
        SwitchListTile(
          title: const Text(
            'Enable Notifications',
            style: TextStyle(
              color: Colors.black,
              fontSize: 16,
              fontFamily: 'Inter',
              fontWeight: FontWeight.w400,
            ),
          ),
          value: _enableNotifications,
          onChanged: (value) {
            setState(() {
              _enableNotifications = value;
            });
          },
        ),
      ],
    );
  }

  Widget _buildActionButtons() {
    return Column(
      children: [
        ElevatedButton(
          onPressed: _isLoading ? null : _previewEvent,
          style: ElevatedButton.styleFrom(
            backgroundColor: AppColors.primary,
            foregroundColor: AppColors.white,
            minimumSize: const Size(double.infinity, 48),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            disabledBackgroundColor: AppColors.primaryDark,
          ),
          child: const Text(
            'Preview Event',
            style: TextStyle(
              fontSize: 16,
              fontFamily: 'Inter',
              fontWeight: FontWeight.w400,
            ),
          ),
        ),
        const SizedBox(height: 16),
        ElevatedButton(
          onPressed: _isLoading ? null : _createEvent,
          style: ElevatedButton.styleFrom(
            backgroundColor: AppColors.primary,
            foregroundColor: AppColors.white,
            minimumSize: const Size(double.infinity, 48),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            disabledBackgroundColor: AppColors.primaryDark,
          ),
          child: _isLoading
              ? const SizedBox(
                  height: 20,
                  width: 20,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(AppColors.white),
                  ),
                )
              : const Text(
                  'Create Event',
                  style: TextStyle(
                    fontSize: 16,
                    fontFamily: 'Inter',
                    fontWeight: FontWeight.w400,
                  ),
                ),
        ),
      ],
    );
  }

  Future<void> _pickBannerImage() async {
    final ImagePicker picker = ImagePicker();
    final XFile? image = await picker.pickImage(source: ImageSource.gallery);
    
    if (image != null) {
      setState(() {
        _bannerImagePath = image.path;
      });
    }
  }

  void _previewEvent() {
    if (_formKey.currentState!.validate()) {
      // TODO: Implement event preview
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Preview functionality coming soon'),
          backgroundColor: Colors.blue,
        ),
      );
    }
  }

  Future<void> _createEvent() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });

      try {
        // Check if user is verified
        final prefs = await SharedPreferences.getInstance();
        final isVerified = prefs.getBool('isVerified');

        if (isVerified != true) {
          if (mounted) {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const EventVerificationScreen(),
              ),
            );
            return;
          }
        }

        // Simulate API call
        await Future.delayed(const Duration(seconds: 2));
        
        // Clear draft after successful creation
        await prefs.clear();

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Event created successfully'),
              backgroundColor: Colors.green,
            ),
          );
          Navigator.pop(context);
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Error creating event: $e'),
              backgroundColor: Colors.red,
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isLoading = false;
          });
        }
      }
    }
  }
}

class _CategoryChip extends StatelessWidget {
  final String label;
  final bool isSelected;
  final Function(bool) onSelected;

  const _CategoryChip({
    required this.label,
    required this.isSelected,
    required this.onSelected,
  });

  @override
  Widget build(BuildContext context) {
    return FilterChip(
      label: Text(
        label,
        style: const TextStyle(
          color: Colors.black,
          fontSize: 14,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
      ),
      selected: isSelected,
      onSelected: onSelected,
      backgroundColor: Colors.white,
      selectedColor: Colors.grey[200],
      side: const BorderSide(color: Color(0xFFD4D4D4)),
    );
  }
}

class _FormatRadioButton extends StatelessWidget {
  final String label;
  final String value;
  final String? groupValue;
  final Function(String?) onChanged;

  const _FormatRadioButton({
    required this.label,
    required this.value,
    required this.groupValue,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Radio<String>(
          value: value,
          groupValue: groupValue,
          onChanged: onChanged,
        ),
        Text(
          label,
          style: const TextStyle(
            color: Colors.black,
            fontSize: 16,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
      ],
    );
  }
}

class _TicketTypeRadioButton extends StatelessWidget {
  final String label;
  final String value;
  final String? groupValue;
  final Function(String?) onChanged;

  const _TicketTypeRadioButton({
    required this.label,
    required this.value,
    required this.groupValue,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Radio<String>(
          value: value,
          groupValue: groupValue,
          onChanged: onChanged,
        ),
        Text(
          label,
          style: const TextStyle(
            color: Colors.black,
            fontSize: 16,
            fontFamily: 'Inter',
            fontWeight: FontWeight.w400,
          ),
        ),
      ],
    );
  }
}